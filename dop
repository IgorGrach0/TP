# импортируем библиотеку tkinter всю сразу
import tkinter
from tkinter import *
from tkinter import messagebox
import sqlite3
import random
from tests import *
import string



con = sqlite3.connect('users.db')
cur = con.cursor()
cur.execute("""CREATE TABLE IF NOT EXISTS users(
    user_name TEXT,
    password TEXT 
) 
""")
con.commit()

#основное окно
def main_window():

    font_header = ('Arial', 15)
    font_entry = ('Arial', 12)
    label_font = ('Arial', 11)
    base_padding = {'padx': 10, 'pady': 8}
    header_padding = {'padx': 10, 'pady': 12}
    main_w = Tk()
    main_w.title('main')
    # размер окна
    main_w.geometry('600x320')
    # можно ли изменять размер окна - нет
    main_w.resizable(False, False)
    send_btn = Button(main_w, text='Создать тест', command=new_test)
    send_btn.place(x=50, y=190, width=200)
    send_btn = Button(main_w, text='Пройти тест', command=test_available )
    send_btn.place(x=350, y=190, width=200)
    if test_record != 1:
        window.quit()
        window.destroy()
# обработчик нажатия на клавишу 'Войти'
def clicked():

    global username_entry
    global password_entry

    # получаем имя пользователя и пароль
    username = username_entry.get()
    password = password_entry.get()

    # проверяем, совпадают ли имя пользователя и пароль в базе данных
    cur.execute("SELECT * FROM users WHERE user_name = ? AND password = ?", (username, password))
    result = cur.fetchone()

    if result:
        print(True)
        main_window()
        # messagebox.showinfo('Успешная авторизация', 'Вы успешно авторизованы!')
    else:
        print(False)
        messagebox.showinfo('Ошибка авторизации', 'Неверное имя пользователя или пароль.')



def registration():
    global random_password
    global password_user

    def check_username_exists(username):
        cur.execute("SELECT * FROM users WHERE user_name = ?", (username,))
        result = cur.fetchone()
        return bool(result)

    def generate_unique_username():
        while True:
            username = ''.join(random.choice(string.ascii_lowercase) for _ in range(8))
            if not check_username_exists(username):
                username_entry_1.delete(0, END)
                username_entry_1.insert(0, username)
                break



    def new_password():
        length = random.randint(8, 14)
        password = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))

        password_user.delete(0, END)
        password_user.insert(0, password)

    def record_regist():
        global test_record
        test_record = 1
        username = username_entry_1.get()
        password = password_user.get()
        # Выполнение запроса к базе данных
        cur.execute("SELECT * FROM users WHERE user_name = ?", (username,))
        result = cur.fetchone()

        # Проверка результата запроса
        if result:

            p = "Пользователь уже зарегистрирован, используйте другое имя пользователя"
            messagebox.showwarning(title='Ошибка', message=p)

        else:
            print("Новый пользователь")
            if len(str(password)) >= 8:
                user_record_list = [username, password]
                cur.execute("INSERT INTO users VALUES (?, ?);", user_record_list)
                con.commit()
                reg.destroy()
                main_window()
                '''reg.quit()
                reg.destroy()
                main_window()'''
            else:
                messagebox.showwarning(title='Ошибка', message="Ваш пароль слишком короткий")

    font_header = ('Arial', 15)
    font_entry = ('Arial', 12)
    label_font = ('Arial', 11)
    base_padding = {'padx': 10, 'pady': 8}
    header_padding = {'padx': 10, 'pady': 12}
    reg = Tk()
    reg.title('Регистрация')
    # размер окна
    reg.geometry('600x320')
    # можно ли изменять размер окна - нет
    reg.resizable(False, False)
    main_label = Label(reg, text='Регистрация', font=font_header, justify=CENTER, **header_padding)
    main_label.pack()
    username_label_1 = Label(reg, text='Имя пользователя', font=label_font, **base_padding)
    username_label_1.pack()
    username_entry_1 = Entry(reg, bg='#fff', fg='#444', font=font_entry)
    username_entry_1.pack()

    send_btn = Button(reg, text='Создай имя пользователя', command=generate_unique_username)
    send_btn.pack(padx=5, pady=5)

    password_label_1 = Label(reg, text='Пароль', font=label_font, **base_padding)
    password_label_1.pack()
    password_user = Entry(reg, bg='#fff', fg='#444', font=font_entry)
    password_user.pack()

    send_btn = Button(reg, text='Создай пароль', command=new_password)
    send_btn.pack(padx=5, pady=5)

    send_btn = Button(reg, text='Зарегестрироваться', command=record_regist)
    send_btn.pack(padx=5, pady=5)



    window.quit()
    window.destroy()


global username_entry
global password_entry
def first_window():
    global password_entry
    global username_entry
    global password_user
    global test_record
    global window
    test_record = 0
    window = Tk()
    window.title('Авторизация')
    # размер окна
    window.geometry('600x320')
    # можно ли изменять размер окна - нет
    window.resizable(False, False)

    # кортежи и словари, содержащие настройки шрифтов и отступов
    font_header = ('Arial', 15)
    font_entry = ('Arial', 12)
    label_font = ('Arial', 11)
    base_padding = {'padx': 10, 'pady': 8}
    header_padding = {'padx': 10, 'pady': 12}

    username_entry = str()
    password_entry = str()

    # заголовок формы: настроены шрифт (font), отцентрирован (justify), добавлены отступы для заголовка
    # для всех остальных виджетов настройки делаются также
    main_label = Label(window, text='Авторизация', font=font_header, justify=CENTER, **header_padding)
    # помещаем виджет в окно по принципу один виджет под другим
    main_label.pack()

    # метка для поля ввода имени
    username_label = Label(window, text='Имя пользователя', font=label_font , **base_padding)
    username_label.pack()

    # поле ввода имени
    username_entry = Entry(window, bg='#fff', fg='#444', font=font_entry)
    username_entry.pack()

    # метка для поля ввода пароля
    password_label = Label(window, text='Пароль', font=label_font , **base_padding)
    password_label.pack()

    # поле ввода пароля
    password_entry = Entry(window, bg='#fff', fg='#444', font=font_entry, show='*')
    password_entry.pack()


    # кнопка отправки формы
    send_btn = Button(window, text='Войти', command=clicked)
    send_btn.pack(padx=5, pady=5)

    send_btn = Button(window, text='Зарегестрироваться', command=registration)
    send_btn.pack(padx=5, pady=5)
    window.mainloop()


first_window()




# запускаем главный цикл окна
window.mainloop()
